// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileFieldNames          = builder.RawFieldNames(&File{})
	fileRows                = strings.Join(fileFieldNames, ",")
	fileRowsExpectAutoSet   = strings.Join(stringx.Remove(fileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fileRowsWithPlaceHolder = strings.Join(stringx.Remove(fileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFileIdPrefix = "cache:file:id:"
)

type (
	fileModel interface {
		Insert(ctx context.Context, data *File) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*File, error)
		Update(ctx context.Context, data *File) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFileModel struct {
		sqlc.CachedConn
		table string
	}

	File struct {
		Id          int64          `db:"id"`
		FileName    sql.NullString `db:"file_name"`
		StorageId   sql.NullString `db:"storage_id"`   // 存储服务中的坐标
		StorageType sql.NullInt64  `db:"storage_type"` // 文件支持多种存储方式
		CreatedAt   time.Time      `db:"created_at"`
		CreatorId   int64          `db:"creator_id"`
		UploadType  sql.NullInt64  `db:"upload_type"` // 文件支持多种上传方式
		IsDeleted   int64          `db:"is_deleted"`
	}
)

func newFileModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFileModel {
	return &defaultFileModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`file`",
	}
}

func (m *defaultFileModel) Delete(ctx context.Context, id int64) error {
	fileIdKey := fmt.Sprintf("%s%v", cacheFileIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fileIdKey)
	return err
}

func (m *defaultFileModel) FindOne(ctx context.Context, id int64) (*File, error) {
	fileIdKey := fmt.Sprintf("%s%v", cacheFileIdPrefix, id)
	var resp File
	err := m.QueryRowCtx(ctx, &resp, fileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileModel) Insert(ctx context.Context, data *File) (sql.Result, error) {
	fileIdKey := fmt.Sprintf("%s%v", cacheFileIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, fileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FileName, data.StorageId, data.StorageType, data.CreatorId, data.UploadType, data.IsDeleted)
	}, fileIdKey)
	return ret, err
}

func (m *defaultFileModel) Update(ctx context.Context, data *File) error {
	fileIdKey := fmt.Sprintf("%s%v", cacheFileIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FileName, data.StorageId, data.StorageType, data.CreatorId, data.UploadType, data.IsDeleted, data.Id)
	}, fileIdKey)
	return err
}

func (m *defaultFileModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFileIdPrefix, primary)
}

func (m *defaultFileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFileModel) tableName() string {
	return m.table
}
